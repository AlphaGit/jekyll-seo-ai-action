const MAX_FILE_SIZE = 500000; // 500KB

const generateDescription = async (page) => {
    const pageContents = await readFile(page, PAGE_ENCODING);
    
    // Check file size
    if (Buffer.byteLength(pageContents, 'utf8') > MAX_FILE_SIZE) {
        return new DescriptionResult(page, null, GenerationStatus.FILE_TOO_BIG, 'File size exceeds the maximum limit');
    }

    const regexMatch = pageContents.match(FRONT_MATTER_REGEX);
    if (!regexMatch || regexMatch.length < 2) {
        console.warn(`No front matter found for ${page} -- is it really a blog post?`);
        return new DescriptionResult(page, null, GenerationStatus.UNKNOWN_ERROR, 'No front matter found');
    }
    const rawFrontMatter = regexMatch[1];
    const fronMatter = yamlLoad(rawFrontMatter);

    if (!fronMatter) {
        console.warn(`No front matter found for ${page} -- is it really a blog post?`);
        return new DescriptionResult(page, null, GenerationStatus.UNKNOWN_ERROR, 'No front matter found');
    }
    if (fronMatter && fronMatter.description) {
        console.info(`Front matter already contains a description for ${page} -- skipping`);
        return new DescriptionResult(page, fronMatter.description, GenerationStatus.SKIPPED);
    }

    const body = pageContents.replace(FRONT_MATTER_REGEX, '');
    const description = await generateDescriptionFromBody(body);
    fronMatter.description = description;

    const newPageContents = `---\n${yamlDump(fronMatter)}---\n${body}`;
    await writeFile(page, newPageContents, PAGE_ENCODING);

    return new DescriptionResult(page, description, GenerationStatus.GENERATED);
};
    lines.push(``);
    lines.push(`| File | Generated description | Status | Error Description |`);
    lines.push(`| :--- | :--- | :--- | :--- |`);
    results.forEach(r => {
        lines.push(`| \`${r.page}\` | ${r.description} | ${r.status} | ${r.errorDescription} |`);
    });
    lines.push(``);
    lines.push(`These changes were automatically generated by [Jekyll SEO AI Action](https://github.com/AlphaGit/jekyll-seo-ai-action).`);

    return lines.join(`\n`);
};
